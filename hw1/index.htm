<!DOCTYPE html>
<html>
<head>
    <title>Tree Planting Eras in San Francisco</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>
    <style>
        #visualization-title h1 {
        text-align: center;
        margin-bottom: 20px; 
        font-family: Arial, sans-serif; 

}
        .map-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr); /* 3 columns */
            gap: 10px;
            margin: 10px;
        }
        .map-container svg {
            width: 470px;
            height: 400px; 
            background-color: #f1f8db; /* Light background for each map */
            border: 1px solid #ccc; /* Subtle border */
            border-radius: 5px; /* rounded corners for a softer look */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
            margin-top: 10px; /* some space around each map for clarity */
        }
        .neighborhood {
            fill: none;
            stroke: #000;
            stroke-width: 1;
        }
    </style>
</head>
<body>

<div id="visualization-title">
    <h1>Tree Planting Trends in San Francisco by Decade</h1>
</div>

<div class="map-grid">
    <div class="map-container"><svg id="map-1950s"></svg></div>
    <div class="map-container"><svg id="map-1960s"></svg></div>
    <div class="map-container"><svg id="map-1970s"></svg></div>
    <div class="map-container"><svg id="map-1980s"></svg></div>
    <div class="map-container"><svg id="map-1990s"></svg></div>
    <div class="map-container"><svg id="map-2000s"></svg></div>
</div>

<div id="legend-container">
    <svg id="legend" width="480" height="80"></svg> 
    <svg id="legend-size" width="1000" height="100"></svg>
</div>

<script>
    const width = 480, height = 360, barHeight = 500;
    const svgMap1 = d3.select("#map-1950s");
    const svgMap2 = d3.select("#map-1960s");
    const svgMap3 = d3.select("#map-1970s");
    const svgMap4 = d3.select("#map-1980s");
    const svgMap5 = d3.select("#map-1990s");
    const svgMap6 = d3.select("#map-2000s");
    const customColors = [
        "#66c2a5", // A nice teal
        "#fc8d62", // A soft orange
        "#8da0cb", // A gentle blue
        "#e78ac3", // A light pink
        "#a6d854", // A lime green
        "#ffd92f", // A sunny yellow
        "#e5c494", // A warm beige
        "#b3b3b3"  // A neutral grey
    ];

    const svgBarChart = d3.select("#bar-chart");

    const projection = d3.geoMercator()
        .center([-122.433701, 37.767683])
        .scale(150000)
        .translate([width / 2, height / 2]);

    const path = d3.geoPath().projection(projection);

    d3.json("SF-Neighborhoods.geo.json").then(function(topoData) {
    const firstObjectName = Object.keys(topoData.objects)[0];
    const features = topojson.feature(topoData, topoData.objects[firstObjectName]);

    // Define an array of all the map SVGs
    const allMaps = [svgMap1, svgMap2, svgMap3, svgMap4, svgMap5, svgMap6];

    // Loop through each SVG and draw the neighborhoods
    allMaps.forEach(svgMap => {
        svgMap.selectAll(".neighborhood")
            .data(features.features)
            .enter().append("path")
            .attr("class", "neighborhood")
            .attr("d", path)
            .style("fill", "none")
            .style("stroke", "#222")
            .style("stroke-width", 1);
    });
});

        const colorScale = d3.scaleOrdinal(d3.schemeDark2);

        d3.csv("Street_Tree_List-2022-01-30_FILTERED.csv", function(d) {
            // Custom parsing of the PlantDate to handle two-digit years
            if (d.PlantDate && d.PlantDate !== "NA") {
                // Split the date string to separate the date and time parts
                const parts = d.PlantDate.split(" ")[0].split("/");
                let year = +parts[2];
                const month = parts[0];
                const day = parts[1];

                // Adjust for two-digit year (assuming dataset doesn't go beyond 2012 for simplicity)
                if (year < 100) {
                    year = year + (year < 50 ? 2000 : 1900); // Adjust based on your dataset's specific year range
                }

                // Reconstruct the date string with a four-digit year
                const dateString = `${month}/${day}/${year}`;

                // Parse the adjusted date string
                d.PlantDate = d3.timeParse("%m/%d/%Y")(dateString);
            } else {
                d.PlantDate = null; // Handle "NA" or missing dates
            }
            return d;
        }).then(function(data) {

            // Assuming 'uniqueCaretakers' contains all distinct qCaretaker values from your dataset
            const uniqueCaretakers = [...new Set(data.map(item => item.qCaretaker).filter(d => d))];

            // Create a color scale mapping each qCaretaker to a color from the custom palette
            const colorScale = d3.scaleOrdinal()
                .domain(uniqueCaretakers)
                .range(customColors);

            createLegend(uniqueCaretakers);
            createSizeLegend();
            // Filter data by decades
            const decades = [
                { svg: svgMap1, startYear: 1960, endYear: 1969 },
                { svg: svgMap2, startYear: 1970, endYear: 1979 },
                { svg: svgMap3, startYear: 1980, endYear: 1989 },
                { svg: svgMap4, startYear: 1990, endYear: 1999 },
                { svg: svgMap5, startYear: 2000, endYear: 2009 },
                { svg: svgMap6, startYear: 2010, endYear: 2019 }
            ];

            decades.forEach(decade => {
                const filteredData = data.filter(d => d.PlantDate && d.PlantDate.getFullYear() >= decade.startYear && d.PlantDate.getFullYear() <= decade.endYear);
                drawTrees3(decade.svg, filteredData);
            });
});

function drawTrees(svg, data) {
    svg.selectAll("circle")
       .data(data)
       .enter()
       .append("circle")
       .attr("cx", d => projection([+d.Longitude, +d.Latitude])[0])
       .attr("cy", d => projection([+d.Longitude, +d.Latitude])[1])
       .attr("r", 1.5)
       .attr("fill", d => colorScale(d.qCaretaker));
}

function drawTrees2(svg, data) {
    svg.selectAll("circle")
       .data(data)
       .enter()
       .append("circle")
       .attr("cx", d => projection([+d.Longitude, +d.Latitude])[0])
       .attr("cy", d => projection([+d.Longitude, +d.Latitude])[1])
       .attr("r", d => {
           // Scale the radius based on the DBH value. Adjust the scaling factor as needed.
           const baseRadius = 1.5; // Base radius for dots
           const scalingFactor = 0.1; // Adjust this factor based on your data range and desired visual impact
           return d.DBH ? Math.max(baseRadius, d.DBH * scalingFactor) : baseRadius; // Ensure there's a minimum size
       })
       .attr("fill", d => colorScale(d.qCaretaker));
}

function drawTrees3(svg, data) {
    svg.selectAll("circle")
       .data(data)
       .enter()
       .append("circle")
       .attr("cx", d => projection([+d.Longitude, +d.Latitude])[0])
       .attr("cy", d => projection([+d.Longitude, +d.Latitude])[1])
       .attr("r", d => d.DBH ? Math.max(1.5, d.DBH * 0.1) : 1.5) // Example size scaling
       .attr("fill", d => colorScale(d.qCaretaker)); // Use the custom color scale

    svg.append("text")
        .attr("x", 10) 
        .attr("y", 50) 
        .text(`New Trees: ${data.length}`) // Display the count
        .attr("font-family", "Arial, sans-serif")
        .attr("font-size", "14px")
        .attr("fill", "black");

        // Adding labels
    const labels = [
        { svg: svgMap1, label: "1960s" },
        { svg: svgMap2, label: "1970s" },
        { svg: svgMap3, label: "1980s" },
        { svg: svgMap4, label: "1990s" },
        { svg: svgMap5, label: "2000s" },
        { svg: svgMap6, label: "2010s" }
    ];

    labels.forEach(l => {
        l.svg.append("text")
        .attr("x", 10)
        .attr("y", 25) 
        .text(l.label)
        .attr("font-family", "sans-serif")
        .attr("font-size", "20px")
        .attr("fill", "black");
    });
}

function createLegend(caretakers) {
    const svgLegend = d3.select("#legend");
    const legendSpacing = 100; // Horizontal space between legend entries

    // Append a group for the legend to the svgLegend
    const legend = svgLegend.append("g")
      .attr("class", "legend")
      // Adjust the vertical position as needed to fit within your layout
      .attr("transform", "translate(0,2)");

    // Create legend entries placed horizontally
    caretakers.forEach((caretaker, index) => {
        // Calculate horizontal position based on index
        const positionX = index * legendSpacing;

        const legendEntry = legend.append("g")
          .attr("transform", `translate(${positionX}, 0)`); // Position each legend entry horizontally

        // Draw the colored rectangle for each caretaker
        legendEntry.append("rect")
          .attr("width", 18)
          .attr("height", 18)
          .style("fill", colorScale(caretaker));

        // Add the caretaker name next to the rectangle
        legendEntry.append("text")
          .attr("x", 24) // Position text to the right of the rectangle
          .attr("y", 9) // Vertically align text with the center of the rectangle
          .attr("dy", ".35em") // Fine-tuning vertical alignment
          .text(caretaker) // Set the text to the caretaker value
          .style("font-size", "12px")
          .attr("fill", "black");
    });
}

const sizeScale = d3.scaleLinear()
    .domain([d3.min(data, d => d.DBH), d3.max(data, d => d.DBH)]) 
    .range([2, 10]); 

function createSizeLegend() {
    const svgLegendSize = d3.select("#legend-size"); 
    const exampleSizes = [2, 6, 10]; 
    const exampleLabels = ["Small (0-20 cm DBH)", "Medium (21-100 cm DBH)", "Large (>100 cm DBH)"]; 

    // Position settings
    const xOffsetStart = 200;
    const yOffset = 20;
    const xSpacing = 200;

    exampleSizes.forEach((size, i) => {
        // Draw circles for each size
        svgLegendSize.append("circle")
            .attr("cx", xOffsetStart + i * xSpacing)
            .attr("cy", yOffset)
            .attr("r", size)
            .style("fill", "lightgrey")
            .style("stroke", "black");

        // Add labels below circles
        svgLegendSize.append("text")
            .attr("x", xOffsetStart + i * xSpacing)
            .attr("y", yOffset + 25) // Adjust based on circle size and desired spacing
            .style("text-anchor", "middle")
            .text(exampleLabels[i])
            .style("font-size", "12px");
    });
}

// Adding labels
const labels = [
    { svg: svgMap1, label: "1960s" },
    { svg: svgMap2, label: "1970s" },
    { svg: svgMap3, label: "1980s" },
    { svg: svgMap4, label: "1990s" },
    { svg: svgMap5, label: "2000s" },
    { svg: svgMap6, label: "2010s" }
];

labels.forEach(l => {
    l.svg.append("text")
       .attr("x", 10) 
       .attr("y", 25) 
       .text(l.label)
       .attr("font-family", "sans-serif")
       .attr("font-size", "20px")
       .attr("fill", "black");
});




</script>
</body>
</html>








